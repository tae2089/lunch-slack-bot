// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bc-labs-lunch-bot/ent/lunch"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Lunch is the model entity for the Lunch schema.
type Lunch struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Payer holds the value of the "payer" field.
	Payer string `json:"payer,omitempty"`
	// RestaurantName holds the value of the "restaurantName" field.
	RestaurantName string `json:"restaurantName,omitempty"`
	// CafeName holds the value of the "cafeName" field.
	CafeName string `json:"cafeName,omitempty"`
	// PaymentTime holds the value of the "paymentTime" field.
	PaymentTime time.Time `json:"paymentTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LunchQuery when eager-loading is set.
	Edges LunchEdges `json:"edges"`
}

// LunchEdges holds the relations/edges for other nodes in the graph.
type LunchEdges struct {
	// Participant holds the value of the participant edge.
	Participant []*LunchParticipant `json:"participant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParticipantOrErr returns the Participant value or an error if the edge
// was not loaded in eager-loading.
func (e LunchEdges) ParticipantOrErr() ([]*LunchParticipant, error) {
	if e.loadedTypes[0] {
		return e.Participant, nil
	}
	return nil, &NotLoadedError{edge: "participant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lunch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lunch.FieldID:
			values[i] = new(sql.NullInt64)
		case lunch.FieldPayer, lunch.FieldRestaurantName, lunch.FieldCafeName:
			values[i] = new(sql.NullString)
		case lunch.FieldCreatedAt, lunch.FieldUpdatedAt, lunch.FieldPaymentTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Lunch", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lunch fields.
func (l *Lunch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lunch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case lunch.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case lunch.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case lunch.FieldPayer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payer", values[i])
			} else if value.Valid {
				l.Payer = value.String
			}
		case lunch.FieldRestaurantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field restaurantName", values[i])
			} else if value.Valid {
				l.RestaurantName = value.String
			}
		case lunch.FieldCafeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cafeName", values[i])
			} else if value.Valid {
				l.CafeName = value.String
			}
		case lunch.FieldPaymentTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paymentTime", values[i])
			} else if value.Valid {
				l.PaymentTime = value.Time
			}
		}
	}
	return nil
}

// QueryParticipant queries the "participant" edge of the Lunch entity.
func (l *Lunch) QueryParticipant() *LunchParticipantQuery {
	return NewLunchClient(l.config).QueryParticipant(l)
}

// Update returns a builder for updating this Lunch.
// Note that you need to call Lunch.Unwrap() before calling this method if this Lunch
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lunch) Update() *LunchUpdateOne {
	return NewLunchClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lunch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lunch) Unwrap() *Lunch {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lunch is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lunch) String() string {
	var builder strings.Builder
	builder.WriteString("Lunch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("payer=")
	builder.WriteString(l.Payer)
	builder.WriteString(", ")
	builder.WriteString("restaurantName=")
	builder.WriteString(l.RestaurantName)
	builder.WriteString(", ")
	builder.WriteString("cafeName=")
	builder.WriteString(l.CafeName)
	builder.WriteString(", ")
	builder.WriteString("paymentTime=")
	builder.WriteString(l.PaymentTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Lunches is a parsable slice of Lunch.
type Lunches []*Lunch

func (l Lunches) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
