// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bc-labs-lunch-bot/ent/lunch"
	"bc-labs-lunch-bot/ent/lunchparticipant"
	"bc-labs-lunch-bot/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LunchParticipantUpdate is the builder for updating LunchParticipant entities.
type LunchParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *LunchParticipantMutation
}

// Where appends a list predicates to the LunchParticipantUpdate builder.
func (lpu *LunchParticipantUpdate) Where(ps ...predicate.LunchParticipant) *LunchParticipantUpdate {
	lpu.mutation.Where(ps...)
	return lpu
}

// SetName sets the "name" field.
func (lpu *LunchParticipantUpdate) SetName(s string) *LunchParticipantUpdate {
	lpu.mutation.SetName(s)
	return lpu
}

// SetCreatedAt sets the "created_at" field.
func (lpu *LunchParticipantUpdate) SetCreatedAt(t time.Time) *LunchParticipantUpdate {
	lpu.mutation.SetCreatedAt(t)
	return lpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpu *LunchParticipantUpdate) SetNillableCreatedAt(t *time.Time) *LunchParticipantUpdate {
	if t != nil {
		lpu.SetCreatedAt(*t)
	}
	return lpu
}

// SetUpdatedAt sets the "updated_at" field.
func (lpu *LunchParticipantUpdate) SetUpdatedAt(t time.Time) *LunchParticipantUpdate {
	lpu.mutation.SetUpdatedAt(t)
	return lpu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpu *LunchParticipantUpdate) SetNillableUpdatedAt(t *time.Time) *LunchParticipantUpdate {
	if t != nil {
		lpu.SetUpdatedAt(*t)
	}
	return lpu
}

// SetPaymentID sets the "payment_id" field.
func (lpu *LunchParticipantUpdate) SetPaymentID(i int) *LunchParticipantUpdate {
	lpu.mutation.SetPaymentID(i)
	return lpu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (lpu *LunchParticipantUpdate) SetNillablePaymentID(i *int) *LunchParticipantUpdate {
	if i != nil {
		lpu.SetPaymentID(*i)
	}
	return lpu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (lpu *LunchParticipantUpdate) ClearPaymentID() *LunchParticipantUpdate {
	lpu.mutation.ClearPaymentID()
	return lpu
}

// SetPayment sets the "payment" edge to the Lunch entity.
func (lpu *LunchParticipantUpdate) SetPayment(l *Lunch) *LunchParticipantUpdate {
	return lpu.SetPaymentID(l.ID)
}

// Mutation returns the LunchParticipantMutation object of the builder.
func (lpu *LunchParticipantUpdate) Mutation() *LunchParticipantMutation {
	return lpu.mutation
}

// ClearPayment clears the "payment" edge to the Lunch entity.
func (lpu *LunchParticipantUpdate) ClearPayment() *LunchParticipantUpdate {
	lpu.mutation.ClearPayment()
	return lpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpu *LunchParticipantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LunchParticipantMutation](ctx, lpu.sqlSave, lpu.mutation, lpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpu *LunchParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := lpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpu *LunchParticipantUpdate) Exec(ctx context.Context) error {
	_, err := lpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpu *LunchParticipantUpdate) ExecX(ctx context.Context) {
	if err := lpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lpu *LunchParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lunchparticipant.Table,
			Columns: lunchparticipant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lunchparticipant.FieldID,
			},
		},
	}
	if ps := lpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpu.mutation.Name(); ok {
		_spec.SetField(lunchparticipant.FieldName, field.TypeString, value)
	}
	if value, ok := lpu.mutation.CreatedAt(); ok {
		_spec.SetField(lunchparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lpu.mutation.UpdatedAt(); ok {
		_spec.SetField(lunchparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lunchparticipant.PaymentTable,
			Columns: []string{lunchparticipant.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lunchparticipant.PaymentTable,
			Columns: []string{lunchparticipant.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lunchparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpu.mutation.done = true
	return n, nil
}

// LunchParticipantUpdateOne is the builder for updating a single LunchParticipant entity.
type LunchParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LunchParticipantMutation
}

// SetName sets the "name" field.
func (lpuo *LunchParticipantUpdateOne) SetName(s string) *LunchParticipantUpdateOne {
	lpuo.mutation.SetName(s)
	return lpuo
}

// SetCreatedAt sets the "created_at" field.
func (lpuo *LunchParticipantUpdateOne) SetCreatedAt(t time.Time) *LunchParticipantUpdateOne {
	lpuo.mutation.SetCreatedAt(t)
	return lpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpuo *LunchParticipantUpdateOne) SetNillableCreatedAt(t *time.Time) *LunchParticipantUpdateOne {
	if t != nil {
		lpuo.SetCreatedAt(*t)
	}
	return lpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lpuo *LunchParticipantUpdateOne) SetUpdatedAt(t time.Time) *LunchParticipantUpdateOne {
	lpuo.mutation.SetUpdatedAt(t)
	return lpuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpuo *LunchParticipantUpdateOne) SetNillableUpdatedAt(t *time.Time) *LunchParticipantUpdateOne {
	if t != nil {
		lpuo.SetUpdatedAt(*t)
	}
	return lpuo
}

// SetPaymentID sets the "payment_id" field.
func (lpuo *LunchParticipantUpdateOne) SetPaymentID(i int) *LunchParticipantUpdateOne {
	lpuo.mutation.SetPaymentID(i)
	return lpuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (lpuo *LunchParticipantUpdateOne) SetNillablePaymentID(i *int) *LunchParticipantUpdateOne {
	if i != nil {
		lpuo.SetPaymentID(*i)
	}
	return lpuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (lpuo *LunchParticipantUpdateOne) ClearPaymentID() *LunchParticipantUpdateOne {
	lpuo.mutation.ClearPaymentID()
	return lpuo
}

// SetPayment sets the "payment" edge to the Lunch entity.
func (lpuo *LunchParticipantUpdateOne) SetPayment(l *Lunch) *LunchParticipantUpdateOne {
	return lpuo.SetPaymentID(l.ID)
}

// Mutation returns the LunchParticipantMutation object of the builder.
func (lpuo *LunchParticipantUpdateOne) Mutation() *LunchParticipantMutation {
	return lpuo.mutation
}

// ClearPayment clears the "payment" edge to the Lunch entity.
func (lpuo *LunchParticipantUpdateOne) ClearPayment() *LunchParticipantUpdateOne {
	lpuo.mutation.ClearPayment()
	return lpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpuo *LunchParticipantUpdateOne) Select(field string, fields ...string) *LunchParticipantUpdateOne {
	lpuo.fields = append([]string{field}, fields...)
	return lpuo
}

// Save executes the query and returns the updated LunchParticipant entity.
func (lpuo *LunchParticipantUpdateOne) Save(ctx context.Context) (*LunchParticipant, error) {
	return withHooks[*LunchParticipant, LunchParticipantMutation](ctx, lpuo.sqlSave, lpuo.mutation, lpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpuo *LunchParticipantUpdateOne) SaveX(ctx context.Context) *LunchParticipant {
	node, err := lpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpuo *LunchParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := lpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpuo *LunchParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := lpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lpuo *LunchParticipantUpdateOne) sqlSave(ctx context.Context) (_node *LunchParticipant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lunchparticipant.Table,
			Columns: lunchparticipant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lunchparticipant.FieldID,
			},
		},
	}
	id, ok := lpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LunchParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lunchparticipant.FieldID)
		for _, f := range fields {
			if !lunchparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lunchparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpuo.mutation.Name(); ok {
		_spec.SetField(lunchparticipant.FieldName, field.TypeString, value)
	}
	if value, ok := lpuo.mutation.CreatedAt(); ok {
		_spec.SetField(lunchparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lunchparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpuo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lunchparticipant.PaymentTable,
			Columns: []string{lunchparticipant.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpuo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lunchparticipant.PaymentTable,
			Columns: []string{lunchparticipant.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LunchParticipant{config: lpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lunchparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpuo.mutation.done = true
	return _node, nil
}
