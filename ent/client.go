// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"bc-labs-lunch-bot/ent/migrate"

	"bc-labs-lunch-bot/ent/lunch"
	"bc-labs-lunch-bot/ent/lunchparticipant"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Lunch is the client for interacting with the Lunch builders.
	Lunch *LunchClient
	// LunchParticipant is the client for interacting with the LunchParticipant builders.
	LunchParticipant *LunchParticipantClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Lunch = NewLunchClient(c.config)
	c.LunchParticipant = NewLunchParticipantClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Lunch:            NewLunchClient(cfg),
		LunchParticipant: NewLunchParticipantClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Lunch:            NewLunchClient(cfg),
		LunchParticipant: NewLunchParticipantClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Lunch.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Lunch.Use(hooks...)
	c.LunchParticipant.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Lunch.Intercept(interceptors...)
	c.LunchParticipant.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *LunchMutation:
		return c.Lunch.mutate(ctx, m)
	case *LunchParticipantMutation:
		return c.LunchParticipant.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// LunchClient is a client for the Lunch schema.
type LunchClient struct {
	config
}

// NewLunchClient returns a client for the Lunch from the given config.
func NewLunchClient(c config) *LunchClient {
	return &LunchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lunch.Hooks(f(g(h())))`.
func (c *LunchClient) Use(hooks ...Hook) {
	c.hooks.Lunch = append(c.hooks.Lunch, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lunch.Intercept(f(g(h())))`.
func (c *LunchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Lunch = append(c.inters.Lunch, interceptors...)
}

// Create returns a builder for creating a Lunch entity.
func (c *LunchClient) Create() *LunchCreate {
	mutation := newLunchMutation(c.config, OpCreate)
	return &LunchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lunch entities.
func (c *LunchClient) CreateBulk(builders ...*LunchCreate) *LunchCreateBulk {
	return &LunchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lunch.
func (c *LunchClient) Update() *LunchUpdate {
	mutation := newLunchMutation(c.config, OpUpdate)
	return &LunchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LunchClient) UpdateOne(l *Lunch) *LunchUpdateOne {
	mutation := newLunchMutation(c.config, OpUpdateOne, withLunch(l))
	return &LunchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LunchClient) UpdateOneID(id int) *LunchUpdateOne {
	mutation := newLunchMutation(c.config, OpUpdateOne, withLunchID(id))
	return &LunchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lunch.
func (c *LunchClient) Delete() *LunchDelete {
	mutation := newLunchMutation(c.config, OpDelete)
	return &LunchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LunchClient) DeleteOne(l *Lunch) *LunchDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LunchClient) DeleteOneID(id int) *LunchDeleteOne {
	builder := c.Delete().Where(lunch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LunchDeleteOne{builder}
}

// Query returns a query builder for Lunch.
func (c *LunchClient) Query() *LunchQuery {
	return &LunchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLunch},
		inters: c.Interceptors(),
	}
}

// Get returns a Lunch entity by its id.
func (c *LunchClient) Get(ctx context.Context, id int) (*Lunch, error) {
	return c.Query().Where(lunch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LunchClient) GetX(ctx context.Context, id int) *Lunch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParticipant queries the participant edge of a Lunch.
func (c *LunchClient) QueryParticipant(l *Lunch) *LunchParticipantQuery {
	query := (&LunchParticipantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lunch.Table, lunch.FieldID, id),
			sqlgraph.To(lunchparticipant.Table, lunchparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lunch.ParticipantTable, lunch.ParticipantColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LunchClient) Hooks() []Hook {
	return c.hooks.Lunch
}

// Interceptors returns the client interceptors.
func (c *LunchClient) Interceptors() []Interceptor {
	return c.inters.Lunch
}

func (c *LunchClient) mutate(ctx context.Context, m *LunchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LunchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LunchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LunchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LunchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Lunch mutation op: %q", m.Op())
	}
}

// LunchParticipantClient is a client for the LunchParticipant schema.
type LunchParticipantClient struct {
	config
}

// NewLunchParticipantClient returns a client for the LunchParticipant from the given config.
func NewLunchParticipantClient(c config) *LunchParticipantClient {
	return &LunchParticipantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lunchparticipant.Hooks(f(g(h())))`.
func (c *LunchParticipantClient) Use(hooks ...Hook) {
	c.hooks.LunchParticipant = append(c.hooks.LunchParticipant, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lunchparticipant.Intercept(f(g(h())))`.
func (c *LunchParticipantClient) Intercept(interceptors ...Interceptor) {
	c.inters.LunchParticipant = append(c.inters.LunchParticipant, interceptors...)
}

// Create returns a builder for creating a LunchParticipant entity.
func (c *LunchParticipantClient) Create() *LunchParticipantCreate {
	mutation := newLunchParticipantMutation(c.config, OpCreate)
	return &LunchParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LunchParticipant entities.
func (c *LunchParticipantClient) CreateBulk(builders ...*LunchParticipantCreate) *LunchParticipantCreateBulk {
	return &LunchParticipantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LunchParticipant.
func (c *LunchParticipantClient) Update() *LunchParticipantUpdate {
	mutation := newLunchParticipantMutation(c.config, OpUpdate)
	return &LunchParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LunchParticipantClient) UpdateOne(lp *LunchParticipant) *LunchParticipantUpdateOne {
	mutation := newLunchParticipantMutation(c.config, OpUpdateOne, withLunchParticipant(lp))
	return &LunchParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LunchParticipantClient) UpdateOneID(id int) *LunchParticipantUpdateOne {
	mutation := newLunchParticipantMutation(c.config, OpUpdateOne, withLunchParticipantID(id))
	return &LunchParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LunchParticipant.
func (c *LunchParticipantClient) Delete() *LunchParticipantDelete {
	mutation := newLunchParticipantMutation(c.config, OpDelete)
	return &LunchParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LunchParticipantClient) DeleteOne(lp *LunchParticipant) *LunchParticipantDeleteOne {
	return c.DeleteOneID(lp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LunchParticipantClient) DeleteOneID(id int) *LunchParticipantDeleteOne {
	builder := c.Delete().Where(lunchparticipant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LunchParticipantDeleteOne{builder}
}

// Query returns a query builder for LunchParticipant.
func (c *LunchParticipantClient) Query() *LunchParticipantQuery {
	return &LunchParticipantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLunchParticipant},
		inters: c.Interceptors(),
	}
}

// Get returns a LunchParticipant entity by its id.
func (c *LunchParticipantClient) Get(ctx context.Context, id int) (*LunchParticipant, error) {
	return c.Query().Where(lunchparticipant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LunchParticipantClient) GetX(ctx context.Context, id int) *LunchParticipant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a LunchParticipant.
func (c *LunchParticipantClient) QueryPayment(lp *LunchParticipant) *LunchQuery {
	query := (&LunchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lunchparticipant.Table, lunchparticipant.FieldID, id),
			sqlgraph.To(lunch.Table, lunch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lunchparticipant.PaymentTable, lunchparticipant.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(lp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LunchParticipantClient) Hooks() []Hook {
	return c.hooks.LunchParticipant
}

// Interceptors returns the client interceptors.
func (c *LunchParticipantClient) Interceptors() []Interceptor {
	return c.inters.LunchParticipant
}

func (c *LunchParticipantClient) mutate(ctx context.Context, m *LunchParticipantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LunchParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LunchParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LunchParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LunchParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LunchParticipant mutation op: %q", m.Op())
	}
}
