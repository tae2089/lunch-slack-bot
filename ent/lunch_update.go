// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bc-labs-lunch-bot/ent/lunch"
	"bc-labs-lunch-bot/ent/lunchparticipant"
	"bc-labs-lunch-bot/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LunchUpdate is the builder for updating Lunch entities.
type LunchUpdate struct {
	config
	hooks    []Hook
	mutation *LunchMutation
}

// Where appends a list predicates to the LunchUpdate builder.
func (lu *LunchUpdate) Where(ps ...predicate.Lunch) *LunchUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LunchUpdate) SetCreatedAt(t time.Time) *LunchUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LunchUpdate) SetNillableCreatedAt(t *time.Time) *LunchUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LunchUpdate) SetUpdatedAt(t time.Time) *LunchUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lu *LunchUpdate) SetNillableUpdatedAt(t *time.Time) *LunchUpdate {
	if t != nil {
		lu.SetUpdatedAt(*t)
	}
	return lu
}

// SetPayer sets the "payer" field.
func (lu *LunchUpdate) SetPayer(s string) *LunchUpdate {
	lu.mutation.SetPayer(s)
	return lu
}

// SetRestaurantName sets the "restaurantName" field.
func (lu *LunchUpdate) SetRestaurantName(s string) *LunchUpdate {
	lu.mutation.SetRestaurantName(s)
	return lu
}

// SetCafeName sets the "cafeName" field.
func (lu *LunchUpdate) SetCafeName(s string) *LunchUpdate {
	lu.mutation.SetCafeName(s)
	return lu
}

// SetPaymentTime sets the "paymentTime" field.
func (lu *LunchUpdate) SetPaymentTime(t time.Time) *LunchUpdate {
	lu.mutation.SetPaymentTime(t)
	return lu
}

// AddParticipantIDs adds the "participant" edge to the LunchParticipant entity by IDs.
func (lu *LunchUpdate) AddParticipantIDs(ids ...int) *LunchUpdate {
	lu.mutation.AddParticipantIDs(ids...)
	return lu
}

// AddParticipant adds the "participant" edges to the LunchParticipant entity.
func (lu *LunchUpdate) AddParticipant(l ...*LunchParticipant) *LunchUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddParticipantIDs(ids...)
}

// Mutation returns the LunchMutation object of the builder.
func (lu *LunchUpdate) Mutation() *LunchMutation {
	return lu.mutation
}

// ClearParticipant clears all "participant" edges to the LunchParticipant entity.
func (lu *LunchUpdate) ClearParticipant() *LunchUpdate {
	lu.mutation.ClearParticipant()
	return lu
}

// RemoveParticipantIDs removes the "participant" edge to LunchParticipant entities by IDs.
func (lu *LunchUpdate) RemoveParticipantIDs(ids ...int) *LunchUpdate {
	lu.mutation.RemoveParticipantIDs(ids...)
	return lu
}

// RemoveParticipant removes "participant" edges to LunchParticipant entities.
func (lu *LunchUpdate) RemoveParticipant(l ...*LunchParticipant) *LunchUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LunchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LunchMutation](ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LunchUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LunchUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LunchUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LunchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lunch.Table,
			Columns: lunch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lunch.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(lunch.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(lunch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Payer(); ok {
		_spec.SetField(lunch.FieldPayer, field.TypeString, value)
	}
	if value, ok := lu.mutation.RestaurantName(); ok {
		_spec.SetField(lunch.FieldRestaurantName, field.TypeString, value)
	}
	if value, ok := lu.mutation.CafeName(); ok {
		_spec.SetField(lunch.FieldCafeName, field.TypeString, value)
	}
	if value, ok := lu.mutation.PaymentTime(); ok {
		_spec.SetField(lunch.FieldPaymentTime, field.TypeTime, value)
	}
	if lu.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lunch.ParticipantTable,
			Columns: []string{lunch.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchparticipant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedParticipantIDs(); len(nodes) > 0 && !lu.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lunch.ParticipantTable,
			Columns: []string{lunch.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchparticipant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lunch.ParticipantTable,
			Columns: []string{lunch.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchparticipant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lunch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LunchUpdateOne is the builder for updating a single Lunch entity.
type LunchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LunchMutation
}

// SetCreatedAt sets the "created_at" field.
func (luo *LunchUpdateOne) SetCreatedAt(t time.Time) *LunchUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LunchUpdateOne) SetNillableCreatedAt(t *time.Time) *LunchUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LunchUpdateOne) SetUpdatedAt(t time.Time) *LunchUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (luo *LunchUpdateOne) SetNillableUpdatedAt(t *time.Time) *LunchUpdateOne {
	if t != nil {
		luo.SetUpdatedAt(*t)
	}
	return luo
}

// SetPayer sets the "payer" field.
func (luo *LunchUpdateOne) SetPayer(s string) *LunchUpdateOne {
	luo.mutation.SetPayer(s)
	return luo
}

// SetRestaurantName sets the "restaurantName" field.
func (luo *LunchUpdateOne) SetRestaurantName(s string) *LunchUpdateOne {
	luo.mutation.SetRestaurantName(s)
	return luo
}

// SetCafeName sets the "cafeName" field.
func (luo *LunchUpdateOne) SetCafeName(s string) *LunchUpdateOne {
	luo.mutation.SetCafeName(s)
	return luo
}

// SetPaymentTime sets the "paymentTime" field.
func (luo *LunchUpdateOne) SetPaymentTime(t time.Time) *LunchUpdateOne {
	luo.mutation.SetPaymentTime(t)
	return luo
}

// AddParticipantIDs adds the "participant" edge to the LunchParticipant entity by IDs.
func (luo *LunchUpdateOne) AddParticipantIDs(ids ...int) *LunchUpdateOne {
	luo.mutation.AddParticipantIDs(ids...)
	return luo
}

// AddParticipant adds the "participant" edges to the LunchParticipant entity.
func (luo *LunchUpdateOne) AddParticipant(l ...*LunchParticipant) *LunchUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddParticipantIDs(ids...)
}

// Mutation returns the LunchMutation object of the builder.
func (luo *LunchUpdateOne) Mutation() *LunchMutation {
	return luo.mutation
}

// ClearParticipant clears all "participant" edges to the LunchParticipant entity.
func (luo *LunchUpdateOne) ClearParticipant() *LunchUpdateOne {
	luo.mutation.ClearParticipant()
	return luo
}

// RemoveParticipantIDs removes the "participant" edge to LunchParticipant entities by IDs.
func (luo *LunchUpdateOne) RemoveParticipantIDs(ids ...int) *LunchUpdateOne {
	luo.mutation.RemoveParticipantIDs(ids...)
	return luo
}

// RemoveParticipant removes "participant" edges to LunchParticipant entities.
func (luo *LunchUpdateOne) RemoveParticipant(l ...*LunchParticipant) *LunchUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveParticipantIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LunchUpdateOne) Select(field string, fields ...string) *LunchUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lunch entity.
func (luo *LunchUpdateOne) Save(ctx context.Context) (*Lunch, error) {
	return withHooks[*Lunch, LunchMutation](ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LunchUpdateOne) SaveX(ctx context.Context) *Lunch {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LunchUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LunchUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LunchUpdateOne) sqlSave(ctx context.Context) (_node *Lunch, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lunch.Table,
			Columns: lunch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lunch.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lunch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lunch.FieldID)
		for _, f := range fields {
			if !lunch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lunch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(lunch.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(lunch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Payer(); ok {
		_spec.SetField(lunch.FieldPayer, field.TypeString, value)
	}
	if value, ok := luo.mutation.RestaurantName(); ok {
		_spec.SetField(lunch.FieldRestaurantName, field.TypeString, value)
	}
	if value, ok := luo.mutation.CafeName(); ok {
		_spec.SetField(lunch.FieldCafeName, field.TypeString, value)
	}
	if value, ok := luo.mutation.PaymentTime(); ok {
		_spec.SetField(lunch.FieldPaymentTime, field.TypeTime, value)
	}
	if luo.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lunch.ParticipantTable,
			Columns: []string{lunch.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchparticipant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedParticipantIDs(); len(nodes) > 0 && !luo.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lunch.ParticipantTable,
			Columns: []string{lunch.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchparticipant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lunch.ParticipantTable,
			Columns: []string{lunch.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchparticipant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lunch{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lunch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
