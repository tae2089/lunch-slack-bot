// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bc-labs-lunch-bot/ent/lunch"
	"bc-labs-lunch-bot/ent/lunchparticipant"
	"bc-labs-lunch-bot/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLunch            = "Lunch"
	TypeLunchParticipant = "LunchParticipant"
)

// LunchMutation represents an operation that mutates the Lunch nodes in the graph.
type LunchMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	payer              *string
	restaurantName     *string
	cafeName           *string
	paymentTime        *time.Time
	clearedFields      map[string]struct{}
	participant        map[int]struct{}
	removedparticipant map[int]struct{}
	clearedparticipant bool
	done               bool
	oldValue           func(context.Context) (*Lunch, error)
	predicates         []predicate.Lunch
}

var _ ent.Mutation = (*LunchMutation)(nil)

// lunchOption allows management of the mutation configuration using functional options.
type lunchOption func(*LunchMutation)

// newLunchMutation creates new mutation for the Lunch entity.
func newLunchMutation(c config, op Op, opts ...lunchOption) *LunchMutation {
	m := &LunchMutation{
		config:        c,
		op:            op,
		typ:           TypeLunch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLunchID sets the ID field of the mutation.
func withLunchID(id int) lunchOption {
	return func(m *LunchMutation) {
		var (
			err   error
			once  sync.Once
			value *Lunch
		)
		m.oldValue = func(ctx context.Context) (*Lunch, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Lunch.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLunch sets the old Lunch of the mutation.
func withLunch(node *Lunch) lunchOption {
	return func(m *LunchMutation) {
		m.oldValue = func(context.Context) (*Lunch, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LunchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LunchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LunchMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LunchMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Lunch.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LunchMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LunchMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Lunch entity.
// If the Lunch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LunchMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LunchMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LunchMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Lunch entity.
// If the Lunch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LunchMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPayer sets the "payer" field.
func (m *LunchMutation) SetPayer(s string) {
	m.payer = &s
}

// Payer returns the value of the "payer" field in the mutation.
func (m *LunchMutation) Payer() (r string, exists bool) {
	v := m.payer
	if v == nil {
		return
	}
	return *v, true
}

// OldPayer returns the old "payer" field's value of the Lunch entity.
// If the Lunch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchMutation) OldPayer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayer: %w", err)
	}
	return oldValue.Payer, nil
}

// ResetPayer resets all changes to the "payer" field.
func (m *LunchMutation) ResetPayer() {
	m.payer = nil
}

// SetRestaurantName sets the "restaurantName" field.
func (m *LunchMutation) SetRestaurantName(s string) {
	m.restaurantName = &s
}

// RestaurantName returns the value of the "restaurantName" field in the mutation.
func (m *LunchMutation) RestaurantName() (r string, exists bool) {
	v := m.restaurantName
	if v == nil {
		return
	}
	return *v, true
}

// OldRestaurantName returns the old "restaurantName" field's value of the Lunch entity.
// If the Lunch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchMutation) OldRestaurantName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRestaurantName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRestaurantName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRestaurantName: %w", err)
	}
	return oldValue.RestaurantName, nil
}

// ResetRestaurantName resets all changes to the "restaurantName" field.
func (m *LunchMutation) ResetRestaurantName() {
	m.restaurantName = nil
}

// SetCafeName sets the "cafeName" field.
func (m *LunchMutation) SetCafeName(s string) {
	m.cafeName = &s
}

// CafeName returns the value of the "cafeName" field in the mutation.
func (m *LunchMutation) CafeName() (r string, exists bool) {
	v := m.cafeName
	if v == nil {
		return
	}
	return *v, true
}

// OldCafeName returns the old "cafeName" field's value of the Lunch entity.
// If the Lunch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchMutation) OldCafeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCafeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCafeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCafeName: %w", err)
	}
	return oldValue.CafeName, nil
}

// ResetCafeName resets all changes to the "cafeName" field.
func (m *LunchMutation) ResetCafeName() {
	m.cafeName = nil
}

// SetPaymentTime sets the "paymentTime" field.
func (m *LunchMutation) SetPaymentTime(t time.Time) {
	m.paymentTime = &t
}

// PaymentTime returns the value of the "paymentTime" field in the mutation.
func (m *LunchMutation) PaymentTime() (r time.Time, exists bool) {
	v := m.paymentTime
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentTime returns the old "paymentTime" field's value of the Lunch entity.
// If the Lunch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchMutation) OldPaymentTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentTime: %w", err)
	}
	return oldValue.PaymentTime, nil
}

// ResetPaymentTime resets all changes to the "paymentTime" field.
func (m *LunchMutation) ResetPaymentTime() {
	m.paymentTime = nil
}

// AddParticipantIDs adds the "participant" edge to the LunchParticipant entity by ids.
func (m *LunchMutation) AddParticipantIDs(ids ...int) {
	if m.participant == nil {
		m.participant = make(map[int]struct{})
	}
	for i := range ids {
		m.participant[ids[i]] = struct{}{}
	}
}

// ClearParticipant clears the "participant" edge to the LunchParticipant entity.
func (m *LunchMutation) ClearParticipant() {
	m.clearedparticipant = true
}

// ParticipantCleared reports if the "participant" edge to the LunchParticipant entity was cleared.
func (m *LunchMutation) ParticipantCleared() bool {
	return m.clearedparticipant
}

// RemoveParticipantIDs removes the "participant" edge to the LunchParticipant entity by IDs.
func (m *LunchMutation) RemoveParticipantIDs(ids ...int) {
	if m.removedparticipant == nil {
		m.removedparticipant = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.participant, ids[i])
		m.removedparticipant[ids[i]] = struct{}{}
	}
}

// RemovedParticipant returns the removed IDs of the "participant" edge to the LunchParticipant entity.
func (m *LunchMutation) RemovedParticipantIDs() (ids []int) {
	for id := range m.removedparticipant {
		ids = append(ids, id)
	}
	return
}

// ParticipantIDs returns the "participant" edge IDs in the mutation.
func (m *LunchMutation) ParticipantIDs() (ids []int) {
	for id := range m.participant {
		ids = append(ids, id)
	}
	return
}

// ResetParticipant resets all changes to the "participant" edge.
func (m *LunchMutation) ResetParticipant() {
	m.participant = nil
	m.clearedparticipant = false
	m.removedparticipant = nil
}

// Where appends a list predicates to the LunchMutation builder.
func (m *LunchMutation) Where(ps ...predicate.Lunch) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LunchMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LunchMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Lunch, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LunchMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LunchMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Lunch).
func (m *LunchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LunchMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, lunch.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, lunch.FieldUpdatedAt)
	}
	if m.payer != nil {
		fields = append(fields, lunch.FieldPayer)
	}
	if m.restaurantName != nil {
		fields = append(fields, lunch.FieldRestaurantName)
	}
	if m.cafeName != nil {
		fields = append(fields, lunch.FieldCafeName)
	}
	if m.paymentTime != nil {
		fields = append(fields, lunch.FieldPaymentTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LunchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lunch.FieldCreatedAt:
		return m.CreatedAt()
	case lunch.FieldUpdatedAt:
		return m.UpdatedAt()
	case lunch.FieldPayer:
		return m.Payer()
	case lunch.FieldRestaurantName:
		return m.RestaurantName()
	case lunch.FieldCafeName:
		return m.CafeName()
	case lunch.FieldPaymentTime:
		return m.PaymentTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LunchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lunch.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case lunch.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case lunch.FieldPayer:
		return m.OldPayer(ctx)
	case lunch.FieldRestaurantName:
		return m.OldRestaurantName(ctx)
	case lunch.FieldCafeName:
		return m.OldCafeName(ctx)
	case lunch.FieldPaymentTime:
		return m.OldPaymentTime(ctx)
	}
	return nil, fmt.Errorf("unknown Lunch field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LunchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lunch.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case lunch.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case lunch.FieldPayer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayer(v)
		return nil
	case lunch.FieldRestaurantName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRestaurantName(v)
		return nil
	case lunch.FieldCafeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCafeName(v)
		return nil
	case lunch.FieldPaymentTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentTime(v)
		return nil
	}
	return fmt.Errorf("unknown Lunch field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LunchMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LunchMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LunchMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Lunch numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LunchMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LunchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LunchMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Lunch nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LunchMutation) ResetField(name string) error {
	switch name {
	case lunch.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case lunch.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case lunch.FieldPayer:
		m.ResetPayer()
		return nil
	case lunch.FieldRestaurantName:
		m.ResetRestaurantName()
		return nil
	case lunch.FieldCafeName:
		m.ResetCafeName()
		return nil
	case lunch.FieldPaymentTime:
		m.ResetPaymentTime()
		return nil
	}
	return fmt.Errorf("unknown Lunch field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LunchMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.participant != nil {
		edges = append(edges, lunch.EdgeParticipant)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LunchMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lunch.EdgeParticipant:
		ids := make([]ent.Value, 0, len(m.participant))
		for id := range m.participant {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LunchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedparticipant != nil {
		edges = append(edges, lunch.EdgeParticipant)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LunchMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lunch.EdgeParticipant:
		ids := make([]ent.Value, 0, len(m.removedparticipant))
		for id := range m.removedparticipant {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LunchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparticipant {
		edges = append(edges, lunch.EdgeParticipant)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LunchMutation) EdgeCleared(name string) bool {
	switch name {
	case lunch.EdgeParticipant:
		return m.clearedparticipant
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LunchMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Lunch unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LunchMutation) ResetEdge(name string) error {
	switch name {
	case lunch.EdgeParticipant:
		m.ResetParticipant()
		return nil
	}
	return fmt.Errorf("unknown Lunch edge %s", name)
}

// LunchParticipantMutation represents an operation that mutates the LunchParticipant nodes in the graph.
type LunchParticipantMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	payment        *int
	clearedpayment bool
	done           bool
	oldValue       func(context.Context) (*LunchParticipant, error)
	predicates     []predicate.LunchParticipant
}

var _ ent.Mutation = (*LunchParticipantMutation)(nil)

// lunchparticipantOption allows management of the mutation configuration using functional options.
type lunchparticipantOption func(*LunchParticipantMutation)

// newLunchParticipantMutation creates new mutation for the LunchParticipant entity.
func newLunchParticipantMutation(c config, op Op, opts ...lunchparticipantOption) *LunchParticipantMutation {
	m := &LunchParticipantMutation{
		config:        c,
		op:            op,
		typ:           TypeLunchParticipant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLunchParticipantID sets the ID field of the mutation.
func withLunchParticipantID(id int) lunchparticipantOption {
	return func(m *LunchParticipantMutation) {
		var (
			err   error
			once  sync.Once
			value *LunchParticipant
		)
		m.oldValue = func(ctx context.Context) (*LunchParticipant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LunchParticipant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLunchParticipant sets the old LunchParticipant of the mutation.
func withLunchParticipant(node *LunchParticipant) lunchparticipantOption {
	return func(m *LunchParticipantMutation) {
		m.oldValue = func(context.Context) (*LunchParticipant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LunchParticipantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LunchParticipantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LunchParticipantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LunchParticipantMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LunchParticipant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LunchParticipantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LunchParticipantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LunchParticipant entity.
// If the LunchParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchParticipantMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LunchParticipantMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LunchParticipantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LunchParticipantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LunchParticipant entity.
// If the LunchParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchParticipantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LunchParticipantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LunchParticipantMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LunchParticipantMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LunchParticipant entity.
// If the LunchParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchParticipantMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LunchParticipantMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPaymentID sets the "payment_id" field.
func (m *LunchParticipantMutation) SetPaymentID(i int) {
	m.payment = &i
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *LunchParticipantMutation) PaymentID() (r int, exists bool) {
	v := m.payment
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the LunchParticipant entity.
// If the LunchParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LunchParticipantMutation) OldPaymentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ClearPaymentID clears the value of the "payment_id" field.
func (m *LunchParticipantMutation) ClearPaymentID() {
	m.payment = nil
	m.clearedFields[lunchparticipant.FieldPaymentID] = struct{}{}
}

// PaymentIDCleared returns if the "payment_id" field was cleared in this mutation.
func (m *LunchParticipantMutation) PaymentIDCleared() bool {
	_, ok := m.clearedFields[lunchparticipant.FieldPaymentID]
	return ok
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *LunchParticipantMutation) ResetPaymentID() {
	m.payment = nil
	delete(m.clearedFields, lunchparticipant.FieldPaymentID)
}

// ClearPayment clears the "payment" edge to the Lunch entity.
func (m *LunchParticipantMutation) ClearPayment() {
	m.clearedpayment = true
}

// PaymentCleared reports if the "payment" edge to the Lunch entity was cleared.
func (m *LunchParticipantMutation) PaymentCleared() bool {
	return m.PaymentIDCleared() || m.clearedpayment
}

// PaymentIDs returns the "payment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentID instead. It exists only for internal usage by the builders.
func (m *LunchParticipantMutation) PaymentIDs() (ids []int) {
	if id := m.payment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPayment resets all changes to the "payment" edge.
func (m *LunchParticipantMutation) ResetPayment() {
	m.payment = nil
	m.clearedpayment = false
}

// Where appends a list predicates to the LunchParticipantMutation builder.
func (m *LunchParticipantMutation) Where(ps ...predicate.LunchParticipant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LunchParticipantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LunchParticipantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LunchParticipant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LunchParticipantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LunchParticipantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LunchParticipant).
func (m *LunchParticipantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LunchParticipantMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, lunchparticipant.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, lunchparticipant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, lunchparticipant.FieldUpdatedAt)
	}
	if m.payment != nil {
		fields = append(fields, lunchparticipant.FieldPaymentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LunchParticipantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lunchparticipant.FieldName:
		return m.Name()
	case lunchparticipant.FieldCreatedAt:
		return m.CreatedAt()
	case lunchparticipant.FieldUpdatedAt:
		return m.UpdatedAt()
	case lunchparticipant.FieldPaymentID:
		return m.PaymentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LunchParticipantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lunchparticipant.FieldName:
		return m.OldName(ctx)
	case lunchparticipant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case lunchparticipant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case lunchparticipant.FieldPaymentID:
		return m.OldPaymentID(ctx)
	}
	return nil, fmt.Errorf("unknown LunchParticipant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LunchParticipantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lunchparticipant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case lunchparticipant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case lunchparticipant.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case lunchparticipant.FieldPaymentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	}
	return fmt.Errorf("unknown LunchParticipant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LunchParticipantMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LunchParticipantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LunchParticipantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LunchParticipant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LunchParticipantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(lunchparticipant.FieldPaymentID) {
		fields = append(fields, lunchparticipant.FieldPaymentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LunchParticipantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LunchParticipantMutation) ClearField(name string) error {
	switch name {
	case lunchparticipant.FieldPaymentID:
		m.ClearPaymentID()
		return nil
	}
	return fmt.Errorf("unknown LunchParticipant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LunchParticipantMutation) ResetField(name string) error {
	switch name {
	case lunchparticipant.FieldName:
		m.ResetName()
		return nil
	case lunchparticipant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case lunchparticipant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case lunchparticipant.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	}
	return fmt.Errorf("unknown LunchParticipant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LunchParticipantMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment != nil {
		edges = append(edges, lunchparticipant.EdgePayment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LunchParticipantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lunchparticipant.EdgePayment:
		if id := m.payment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LunchParticipantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LunchParticipantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LunchParticipantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment {
		edges = append(edges, lunchparticipant.EdgePayment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LunchParticipantMutation) EdgeCleared(name string) bool {
	switch name {
	case lunchparticipant.EdgePayment:
		return m.clearedpayment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LunchParticipantMutation) ClearEdge(name string) error {
	switch name {
	case lunchparticipant.EdgePayment:
		m.ClearPayment()
		return nil
	}
	return fmt.Errorf("unknown LunchParticipant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LunchParticipantMutation) ResetEdge(name string) error {
	switch name {
	case lunchparticipant.EdgePayment:
		m.ResetPayment()
		return nil
	}
	return fmt.Errorf("unknown LunchParticipant edge %s", name)
}
