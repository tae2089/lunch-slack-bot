// Code generated by ent, DO NOT EDIT.

package lunch

import (
	"bc-labs-lunch-bot/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Lunch {
	return predicate.Lunch(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Lunch {
	return predicate.Lunch(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Lunch {
	return predicate.Lunch(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Lunch {
	return predicate.Lunch(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Lunch {
	return predicate.Lunch(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Lunch {
	return predicate.Lunch(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Lunch {
	return predicate.Lunch(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldUpdatedAt, v))
}

// Payer applies equality check predicate on the "payer" field. It's identical to PayerEQ.
func Payer(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldPayer, v))
}

// RestaurantName applies equality check predicate on the "restaurantName" field. It's identical to RestaurantNameEQ.
func RestaurantName(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldRestaurantName, v))
}

// CafeName applies equality check predicate on the "cafeName" field. It's identical to CafeNameEQ.
func CafeName(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldCafeName, v))
}

// PaymentTime applies equality check predicate on the "paymentTime" field. It's identical to PaymentTimeEQ.
func PaymentTime(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldPaymentTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldLTE(FieldUpdatedAt, v))
}

// PayerEQ applies the EQ predicate on the "payer" field.
func PayerEQ(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldPayer, v))
}

// PayerNEQ applies the NEQ predicate on the "payer" field.
func PayerNEQ(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldNEQ(FieldPayer, v))
}

// PayerIn applies the In predicate on the "payer" field.
func PayerIn(vs ...string) predicate.Lunch {
	return predicate.Lunch(sql.FieldIn(FieldPayer, vs...))
}

// PayerNotIn applies the NotIn predicate on the "payer" field.
func PayerNotIn(vs ...string) predicate.Lunch {
	return predicate.Lunch(sql.FieldNotIn(FieldPayer, vs...))
}

// PayerGT applies the GT predicate on the "payer" field.
func PayerGT(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldGT(FieldPayer, v))
}

// PayerGTE applies the GTE predicate on the "payer" field.
func PayerGTE(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldGTE(FieldPayer, v))
}

// PayerLT applies the LT predicate on the "payer" field.
func PayerLT(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldLT(FieldPayer, v))
}

// PayerLTE applies the LTE predicate on the "payer" field.
func PayerLTE(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldLTE(FieldPayer, v))
}

// PayerContains applies the Contains predicate on the "payer" field.
func PayerContains(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldContains(FieldPayer, v))
}

// PayerHasPrefix applies the HasPrefix predicate on the "payer" field.
func PayerHasPrefix(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldHasPrefix(FieldPayer, v))
}

// PayerHasSuffix applies the HasSuffix predicate on the "payer" field.
func PayerHasSuffix(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldHasSuffix(FieldPayer, v))
}

// PayerEqualFold applies the EqualFold predicate on the "payer" field.
func PayerEqualFold(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEqualFold(FieldPayer, v))
}

// PayerContainsFold applies the ContainsFold predicate on the "payer" field.
func PayerContainsFold(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldContainsFold(FieldPayer, v))
}

// RestaurantNameEQ applies the EQ predicate on the "restaurantName" field.
func RestaurantNameEQ(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldRestaurantName, v))
}

// RestaurantNameNEQ applies the NEQ predicate on the "restaurantName" field.
func RestaurantNameNEQ(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldNEQ(FieldRestaurantName, v))
}

// RestaurantNameIn applies the In predicate on the "restaurantName" field.
func RestaurantNameIn(vs ...string) predicate.Lunch {
	return predicate.Lunch(sql.FieldIn(FieldRestaurantName, vs...))
}

// RestaurantNameNotIn applies the NotIn predicate on the "restaurantName" field.
func RestaurantNameNotIn(vs ...string) predicate.Lunch {
	return predicate.Lunch(sql.FieldNotIn(FieldRestaurantName, vs...))
}

// RestaurantNameGT applies the GT predicate on the "restaurantName" field.
func RestaurantNameGT(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldGT(FieldRestaurantName, v))
}

// RestaurantNameGTE applies the GTE predicate on the "restaurantName" field.
func RestaurantNameGTE(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldGTE(FieldRestaurantName, v))
}

// RestaurantNameLT applies the LT predicate on the "restaurantName" field.
func RestaurantNameLT(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldLT(FieldRestaurantName, v))
}

// RestaurantNameLTE applies the LTE predicate on the "restaurantName" field.
func RestaurantNameLTE(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldLTE(FieldRestaurantName, v))
}

// RestaurantNameContains applies the Contains predicate on the "restaurantName" field.
func RestaurantNameContains(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldContains(FieldRestaurantName, v))
}

// RestaurantNameHasPrefix applies the HasPrefix predicate on the "restaurantName" field.
func RestaurantNameHasPrefix(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldHasPrefix(FieldRestaurantName, v))
}

// RestaurantNameHasSuffix applies the HasSuffix predicate on the "restaurantName" field.
func RestaurantNameHasSuffix(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldHasSuffix(FieldRestaurantName, v))
}

// RestaurantNameEqualFold applies the EqualFold predicate on the "restaurantName" field.
func RestaurantNameEqualFold(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEqualFold(FieldRestaurantName, v))
}

// RestaurantNameContainsFold applies the ContainsFold predicate on the "restaurantName" field.
func RestaurantNameContainsFold(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldContainsFold(FieldRestaurantName, v))
}

// CafeNameEQ applies the EQ predicate on the "cafeName" field.
func CafeNameEQ(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldCafeName, v))
}

// CafeNameNEQ applies the NEQ predicate on the "cafeName" field.
func CafeNameNEQ(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldNEQ(FieldCafeName, v))
}

// CafeNameIn applies the In predicate on the "cafeName" field.
func CafeNameIn(vs ...string) predicate.Lunch {
	return predicate.Lunch(sql.FieldIn(FieldCafeName, vs...))
}

// CafeNameNotIn applies the NotIn predicate on the "cafeName" field.
func CafeNameNotIn(vs ...string) predicate.Lunch {
	return predicate.Lunch(sql.FieldNotIn(FieldCafeName, vs...))
}

// CafeNameGT applies the GT predicate on the "cafeName" field.
func CafeNameGT(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldGT(FieldCafeName, v))
}

// CafeNameGTE applies the GTE predicate on the "cafeName" field.
func CafeNameGTE(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldGTE(FieldCafeName, v))
}

// CafeNameLT applies the LT predicate on the "cafeName" field.
func CafeNameLT(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldLT(FieldCafeName, v))
}

// CafeNameLTE applies the LTE predicate on the "cafeName" field.
func CafeNameLTE(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldLTE(FieldCafeName, v))
}

// CafeNameContains applies the Contains predicate on the "cafeName" field.
func CafeNameContains(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldContains(FieldCafeName, v))
}

// CafeNameHasPrefix applies the HasPrefix predicate on the "cafeName" field.
func CafeNameHasPrefix(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldHasPrefix(FieldCafeName, v))
}

// CafeNameHasSuffix applies the HasSuffix predicate on the "cafeName" field.
func CafeNameHasSuffix(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldHasSuffix(FieldCafeName, v))
}

// CafeNameEqualFold applies the EqualFold predicate on the "cafeName" field.
func CafeNameEqualFold(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldEqualFold(FieldCafeName, v))
}

// CafeNameContainsFold applies the ContainsFold predicate on the "cafeName" field.
func CafeNameContainsFold(v string) predicate.Lunch {
	return predicate.Lunch(sql.FieldContainsFold(FieldCafeName, v))
}

// PaymentTimeEQ applies the EQ predicate on the "paymentTime" field.
func PaymentTimeEQ(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldEQ(FieldPaymentTime, v))
}

// PaymentTimeNEQ applies the NEQ predicate on the "paymentTime" field.
func PaymentTimeNEQ(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldNEQ(FieldPaymentTime, v))
}

// PaymentTimeIn applies the In predicate on the "paymentTime" field.
func PaymentTimeIn(vs ...time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldIn(FieldPaymentTime, vs...))
}

// PaymentTimeNotIn applies the NotIn predicate on the "paymentTime" field.
func PaymentTimeNotIn(vs ...time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldNotIn(FieldPaymentTime, vs...))
}

// PaymentTimeGT applies the GT predicate on the "paymentTime" field.
func PaymentTimeGT(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldGT(FieldPaymentTime, v))
}

// PaymentTimeGTE applies the GTE predicate on the "paymentTime" field.
func PaymentTimeGTE(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldGTE(FieldPaymentTime, v))
}

// PaymentTimeLT applies the LT predicate on the "paymentTime" field.
func PaymentTimeLT(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldLT(FieldPaymentTime, v))
}

// PaymentTimeLTE applies the LTE predicate on the "paymentTime" field.
func PaymentTimeLTE(v time.Time) predicate.Lunch {
	return predicate.Lunch(sql.FieldLTE(FieldPaymentTime, v))
}

// HasParticipant applies the HasEdge predicate on the "participant" edge.
func HasParticipant() predicate.Lunch {
	return predicate.Lunch(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipantTable, ParticipantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantWith applies the HasEdge predicate on the "participant" edge with a given conditions (other predicates).
func HasParticipantWith(preds ...predicate.LunchParticipant) predicate.Lunch {
	return predicate.Lunch(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParticipantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipantTable, ParticipantColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Lunch) predicate.Lunch {
	return predicate.Lunch(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Lunch) predicate.Lunch {
	return predicate.Lunch(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Lunch) predicate.Lunch {
	return predicate.Lunch(func(s *sql.Selector) {
		p(s.Not())
	})
}
